import asyncio
from typing import Optional

from app.application.interfaces.ai_provider import AIProvider
from app.domain.value_objects.code_snippet import CodeSnippet
from app.domain.value_objects.code_explanation import CodeExplanation


class FakeAIProvider(AIProvider):
    """Fake AI provider for testing and development."""

    @property
    def provider_name(self) -> str:
        """Return the provider name."""
        return "fake"

    async def explain_code(self, code_snippet: CodeSnippet) -> CodeExplanation:
        """Provide a fake explanation for testing."""
        language_part = f" {code_snippet.language}" if code_snippet.language else ""

        fake_explanation = f"""# Code Explanation{language_part}

**Overview:**
This is a fake explanation for development and testing purposes.

**Code Analysis:**
- **Length:** {len(code_snippet.content)} characters
- **Lines:** {len(code_snippet.content.splitlines())} lines
- **Language:** {code_snippet.language or 'Unknown'}

**What it does:**
This code snippet appears to contain programming logic. In a real implementation, an AI provider would analyze the syntax, identify patterns, and provide detailed explanations about what the code does, how it works, and any potential improvements.

**Key Concepts:**
- Placeholder analysis for development/testing
- Demonstrates the expected response format
- Maintains consistent interface contract

**Potential Improvements:**
- This is a mock response from the fake provider
- Replace with real AI provider for actual analysis

*Note: This explanation was generated by the FakeAIProvider for testing purposes.*"""

        # Add a small delay to simulate real AI processing
        await asyncio.sleep(0.1)

        return CodeExplanation(
            snippet=code_snippet,  # Required parameter
            explanation=fake_explanation,
            provider=self.provider_name,
            is_placeholder=True,
        )
